// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Conference {
  id                  Int                 @id @default(autoincrement())
  name                String
  name_ru             String?
  allow_ru            Boolean             @default(false)
  site_url            String?
  description         String?
  start_date          DateTime?           @db.Date
  submission_deadline DateTime?           @db.Date
  acronym             String              @unique
  short_name          String
  email               String?
  creator_id          Int?
  creator             User?               @relation(fields: [creator_id], references: [id], onDelete: SetNull)
  symposiums          Symposium[]
  topics              Topic[]
  settings            ConferenceSettings?
  submissions         Submission[]

  @@map("conferences")
}

model User {
  id                 Int          @id @default(autoincrement())
  email              String       @unique
  created_at         DateTime     @default(now())
  password           String
  first_name         String
  last_name          String
  middle_name        String?      @default("")
  title              String?      @default("")
  affiliation        String?      @default("")
  web_page           String?      @default("")
  address_line_1     String?      @default("")
  address_line_2     String?      @default("")
  orcid_id           String?      @default("")
  city               String?      @default("")
  state              String?      @default("")
  country            String?      @default("")
  is_registered      Boolean      @default(false)
  registration_token String?      @unique
  plan_id            Int?
  plan               Plan?        @relation(fields: [plan_id], references: [id], onDelete: SetNull)
  conferences        Conference[]
  submissions        Submission[]

  @@map("users")
}

model Submission {
  id                  Int        @id @default(autoincrement())
  local_id            Int
  title               String
  title_ru            String?
  abstract            String
  abstract_ru         String?
  keywords            String
  keywords_ru         String?
  presentation_format String
  topic_id            Int
  topic               Topic      @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  conference_id       Int
  conference          Conference @relation(fields: [conference_id], references: [id], onDelete: Cascade)
  authors             Author[]
  created_by          User       @relation(fields: [created_by_id], references: [id])
  created_by_id       Int
  created_at          DateTime   @default(now())
  updated_at          DateTime   @default(now()) @updatedAt()
  status              String     @default("submitted")

  @@map("submissions")
}

model Author {
  id               Int        @id @default(autoincrement())
  email            String
  first_name       String
  last_name        String
  title            String
  affiliation      String
  web_page         String?
  country          String
  is_corresponding Boolean    @default(false)
  is_presenter     Boolean    @default(false)
  first_name_ru    String?
  last_name_ru     String?
  submission_id    Int
  submission       Submission @relation(fields: [submission_id], references: [id], onDelete: Cascade)

  @@map("authors")
}

model Symposium {
  id            Int        @id @default(autoincrement())
  conference_id Int
  conference    Conference @relation(fields: [conference_id], references: [id], onDelete: Cascade)
  topics        Topic[]
  name          String
  name_ru       String?
  position      Int        @default(0)

  @@map("symposiums")
}

model Topic {
  id            Int          @id @default(autoincrement())
  symposium_id  Int?
  symposium     Symposium?   @relation(fields: [symposium_id], references: [id], onDelete: Cascade)
  name          String
  name_ru       String?
  position      Int          @default(0)
  conference_id Int?
  conference    Conference?  @relation(fields: [conference_id], references: [id], onDelete: Cascade)
  Submission    Submission[]

  @@map("topics")
}

model Plan {
  id                  Int     @id @default(autoincrement())
  name                String  @unique
  maximum_conferences Int
  users               User[]
  is_public           Boolean @default(false)
  price               Float?  @default(1000)
  url_name            String

  @@map("plans")
}

model ConferenceSettings {
  id                   Int        @id @default(autoincrement())
  conference_id        Int        @unique
  conference           Conference @relation(fields: [conference_id], references: [id], onDelete: Cascade)
  presentation_formats String[]   @default(["online", "offline"])

  @@map("conference_settings")
}
